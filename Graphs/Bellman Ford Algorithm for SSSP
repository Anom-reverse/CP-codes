// Single Source Shortest Path Algo.
// Time Complexity O(Vertex*Edges)
// Can Handle Negative Weights on *Directed Graphs unlike Dijkstra
// Cannot be applied to an Undirected graph having negative weight
// 1-Take distance of all vertices from Source as Infinity
// 2-Relax all edges (V-1) times
// 3-Detect a negative weight cycle
int vertex, edges;
vector<vector<int>> graph;
bool flag = 0;
vector<int> bellman_ford(int src)
{
	vector<int> dis(vertex + 1, INT_MAX);
	dis[src] = 0;
	for (int i = 0; i < vertex - 1; i++) {

		for (auto edge : graph) {

			int u = edge[0];
			int v = edge[1];
			int w = edge[2];

			if (dis[u] != INT_MAX && dis[u] + w < dis[v]) {
				dis[v] = dis[u] + w;
			}
		}
	}
	for (auto edge : graph) {

		int u = edge[0];
		int v = edge[1];
		int w = edge[2];

		if (dis[u] != INT_MAX && dis[u] + w < dis[v]) {
			flag = 1;
		}
	}
	return dis;
}
void solve()
{
	cin >> vertex >> edges;
	for (int i = 0; i < edges; i++) {

		int u, v, wt;
		cin >> u >> v >> wt;
		graph.push_back({u, v, wt});

	}

	vector<int> distance = bellman_ford(1);

	if (flag) {
		cout << "Negative Weight cycle";
		return;
	}

	for (int i = 1; i <= vertex; i++)
		cout << distance[i] << endl;
}
